能否正确高效的选择合适的结点关乎到系统的性能，因此结点选择策略是系统优化的一个重点；
以下结点分配策略都在客户端中进行

一、循环式结点选择策略：
不可用，因为一个资源在一个客户端运行过程中最多请求一次；

二、心跳检测：
不可用，当客户端向资源管理中心申请一个结点列表后就需要马上进行结点分配策略了，没有时间进行心跳检测；

三、统计发送次数和是否正在发送：
以一个网络结点为例，此结点作为服务器（资源提供者）将会给多个结点发送某些资源，那么此结点就可以统计
本结点的发送次数，以及本结点当前是否在发送资源；当客户端（资源请求者）请求资源时，会先从资源管理中心
获得一份相关资源的结点列表，那么客户端就可以通过rpc向结点列表中的结点请求它们各自的发送次数和发送状态，
再选择发送次数较少的和没有正在发送资源的结点来向本客户端发送相关资源；
优点：简单，没有过多的逻辑；
缺点：若结点列表非常庞大，那么rpc轮询一次的代价太大，并且若在轮询中一些没有轮询到的结点掉线了，那么会
造成严重的响应时延，自然会造成客户端请求资源变得很慢；

解决办法：
1、将发送次数统一保存到资源管理中心，不保存发送状态：
在客户端请求结点列表后，结点中带有发送次数，这样就可以方便选择；代价就是服务器发送完一个资源后要主动
向资源管理中心报告，将该结点的发送次数+1；可能出现的问题是，若多个客户端同时选中了一个服务器，可能会造成
该服务器的发送压力，因为系统中没有表示发送状态的量，解决办法就是在服务器中设定一个阈值，当请求数大于阈值后，
后面的请求作废，不予处理和回应，但势必会增加断点续传的数量；
2、将发送次数和发送状态都保存在资源管理中心：
与上面的方法相比性能更好，但也增加了资源管理中心的压力，服务器多了一次rpc的请求，在服务器接到发送任务后，
服务器要先向资源管理中心申请改变发送状态；


从上面的情况来看，解决结点选择问题的方法比较多，但基本都遵循一个规律，逻辑越简单，性能越低下。
所有的解决方法都是思考后的结论，并没有进行物理验证，因此不能断然下结论哪种方法更好。
